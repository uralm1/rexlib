#!/usr/bin/perl
# This is the part of R2D2
# Router (iptables) syncronizer
# author: Ural Khassanov, 2013

use strict;
use warnings;
use FindBin;
#use lib $FindBin::Bin;
use DBI;
use NetAddr::IP::Lite;
use Encode;
#use Data::Dumper;
use v5.12;

# this looks kinda experimental
use Sys::RunAlone;

my $agent_name = 'rtsyn';
my $version = 'r2d2.rtsyn damaged brain v1.5';

my $cfg;
{ # slurp config
  open my $fh, '<', "$FindBin::Bin/r2d2.conf" or die "Can't read config file!\n";
  local $/ = undef;
  $cfg = eval <$fh>;
  close $fh;
}
die "Error found in config file.\n" if (!$cfg or ref($cfg) ne 'HASH');

my $client_out_chain = 'pipe_out_inet_clients'; # mangle chain name
my $ruledir = '/var/r2d2';
my $rulefile = "$ruledir/firewall.clients";
my $iptables_path = '/usr/sbin/iptables';
my $iptables_restore_path = '/usr/sbin/iptables-restore';
my $filelog = '/etc/r2d2/err.log';

my %rt_marks = (
  '0' => '', # ufanet
  '1' => '-j MARK --set-mark 2', # beeline
);

unless (-e $ruledir or mkdir $ruledir) {
  die "Unable to create directory $ruledir.\n";
}

my $no_rulefile;
$no_rulefile = 1 unless (-e $rulefile);

my $dbh_inet = DBI->connect("DBI:mysql:database=$cfg->{db};host=$cfg->{dbhost}", $cfg->{dbuser}, $cfg->{dbpass}) or
  die "Connection to database $cfg->{db} failed!\n";

$dbh_inet->do("SET NAMES 'UTF8'");

dblog("ROUTER syncronization started ($version).");

###
# debug (iptables -t mangle -N testchain_out)
#$client_out_chain = 'testchain_out';
#$rulefile = 'firewall2.clients';

# create rule dumps
my @dump_m_out = `$iptables_path -t mangle -nvx --line-numbers -L $client_out_chain`;
if ($?) {
  dblog("Error dumping rules $client_out_chain in mangle table!", 1);
  die;
}

###
my $s = $dbh_inet->prepare("SELECT ip, rt \
FROM clients, clients_sync s WHERE s.sync_rt = '1' AND clients.login = s.login ORDER BY ip ASC");
$s->execute;
my $syn_counter = 0;

while (my ($dbip, $rt) = $s->fetchrow_array) {
  # update iptables rules here and reset sync flags
  my $ipo = NetAddr::IP::Lite->new($dbip);
  unless ($ipo) {
    dblog("Invalid ip address $dbip.", 1);
    next;
  }
  my $ip = $ipo->addr;

  dblog("ROUTER updating iptables: $ip");

  my $failure = 0;
  # process out-rules in mangle table
  my $ff = 0;
  my $ri = 1; # actual rule index
  for (my $i = 2; $i < @dump_m_out; $i++) { # skip first 2 lines
    $_ = $dump_m_out[$i];
    # n pkt bytes MARK all -- * * 10.15.0.2 0.0.0.0/0 MARK set 0x2
    # n pkt bytes      all -- * * 10.15.0.2 0.0.0.0/0
    if (/^\s*(\d+)\s+ \S+\s+ \S+\s+ \S*\s+ \S+\s+ \-\-\s+ \S+\s+ \S+\s+ \Q$ip\E\s+ \S+\s+ .*/x) {
      if (!$ff) {
        dblog("Marking-rules sync. Replacing rule #$1 ip $ip in mangle table.");
        $ff = 1;
	if (system("$iptables_path -t mangle -R $client_out_chain $ri -s $ip $rt_marks{$rt}")) {
	  $failure = 1;
          dblog("Marking-rules sync error. Can't replace rule in mangle table.", 1);
	}
      } else {
        dblog("Marking-rules sync. Deleting duplicate rule #$1 ip $ip in mangle table.");
	if (system("$iptables_path -t mangle -D $client_out_chain $ri")) {
	  $failure = 1;
          dblog("Marking-rules sync error. Can't delete rule from mangle table.", 1);
	} else {
          $ri--;
          $dump_m_out[$i] = '';
        }
      }
    }
    $ri++ if $_;
  }
  if (!$ff) { # if not found, add rule
    dblog("Marking-rules sync. Appending rule ip $ip to mangle table.");
    if (system("$iptables_path -t mangle -A $client_out_chain -s $ip $rt_marks{$rt}")) {
      $failure = 1;
      dblog("Marking-rules sync error. Can't append rule to mangle table.", 1);
    }
  }

  # update sync flag
  if (!$failure) {
    my $q_ip = $dbh_inet->quote($dbip);
    $dbh_inet->do("UPDATE clients, clients_sync s SET s.sync_rt = '0' WHERE ip = $q_ip AND clients.login = s.login");
  }

  $syn_counter++;
}


# clean up unused/deleted ip-s
# retrive all data to speed up all process a little
my $sssh = $dbh_inet->prepare("SELECT ip FROM clients");
$sssh->execute;
my $dbref = $sssh->fetchall_arrayref();
my %dbips;
foreach (@$dbref) {
  #($ipn)=@$_;
  $dbips{$$_[0]} = 1;
}

# process marking-chain
my $ri = 1; # actual rule index
for (my $i = 2; $i < @dump_m_out; $i++) { # skip first 2 lines
  $_ = $dump_m_out[$i];
  # n pkt bytes MARK all -- * * 10.15.0.2 0.0.0.0/0 MARK set 0x2
  # n pkt bytes      all -- * * 10.15.0.2 0.0.0.0/0
  if (/^\s*(\d+)\s+ \S+\s+ \S+\s+ \S*\s+ \S+\s+ \-\-\s+ \S+\s+ \S+\s+ (\S+)\s+ \S+\s+ .*/x) {
    #print "process mark-chain rule $1 src $2\n";
    my $ipo = NetAddr::IP::Lite->new($2);
    unless ($ipo) {
      dblog("Invalid ip address conversion $2", 1);
      next;
    }
    if (!defined($dbips{$ipo->numeric})) { # not in database
      dblog("Marking out-rules sync. Rule #$ri ip $2 is not found in database. Deleting.");
      if (system("$iptables_path -t mangle -D $client_out_chain $ri")) {
	dblog("Marking out-rules sync error. Can't delete rule from mangle table.", 1);
      } else {
        $ri--;
        $syn_counter++; # force script-files update
      }
    }
  }
  $ri++ if $_;
}


if ($syn_counter > 0 or $no_rulefile) {
  # write rule-file
  dblog("Updating rulefile: $rulefile");
  unless (open(RULEFILE, '>', $rulefile)) {
    dblog("Can't create rule-file: $!");
    die;
  }
  print RULEFILE "# WARNING: this is autogenerated file, don't run or change it!\n\n";
  print RULEFILE "*mangle\n";
  print RULEFILE ":$client_out_chain - [0:0]\n\n";

  $s = $dbh_inet->prepare("SELECT login, clients.desc, ip, rt \
FROM clients ORDER BY ip ASC");
  $s->execute;
  while (my ($login, $desc, $dbip, $rt) = $s->fetchrow_array) {
    my $ipo = NetAddr::IP::Lite->new($dbip);
    unless ($ipo) {
      dblog("Invalid ip address $dbip, $login");
      next;
    }
    my $ip = $ipo->addr;

    # make description looks good on erebus
    Encode::from_to($desc, 'utf-8', 'koi8-r');

    print RULEFILE "# $login"; print RULEFILE ", $desc" if $desc; print RULEFILE "\n";
    print RULEFILE "-A $client_out_chain -s $ip $rt_marks{$rt}\n";
  }
  print RULEFILE "COMMIT\n";
  close RULEFILE;
}

if ($no_rulefile) {
  !system "$iptables_restore_path --noflush < $rulefile" or dblog("Can't activate rulefile configuration.");
}

dblog("ROUTER syncronization finished.");
$dbh_inet->disconnect;

exit;


# dblog("msg"); or dblog("msg", 1);
sub dblog {
  my $msg = shift;
  my $f_log = shift;

  my $q_msg = $dbh_inet->quote($agent_name.': '.$msg);
  $dbh_inet->do("REPLACE INTO log_agents \
SET row_id = (SELECT COALESCE(MAX(log_id), 0) % 5000 + 1 \
FROM log_agents AS t), \
msg = $q_msg");
  #print "$q_msg\n";

  if ($f_log) {
    if (!open(FLOGFILE, '>>', $filelog)) {
      dblog("Can't open logfile: $!");
    } else {
      $msg = localtime().' '.$msg."\n";
      print FLOGFILE $msg;
      close FLOGFILE;
    }
  }
}

__END__
